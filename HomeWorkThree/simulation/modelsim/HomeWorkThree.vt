// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "03/25/2019 09:25:29"
                                                                                
// Verilog Test Bench template for design : HomeWorkOne
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ps
module HomeWorkThree_test();
// test vector input registers
reg Asynch_in;
reg clock;
reg reset;
// wires                                               
wire Synch_out;

// assign statements (if any)                          
HomeWorkThree	i1 (
// port map - connection between master ports and signals/registers   
	.Asynch_in(Asynch_in),
	.Synch_out(Synch_out),
	.clock(clock),
	.reset(reset)
);
initial  begin                                                  
	clock								=		1'b0			;
	reset								=		1'b1			;
	Asynch_in					=		1'b0			;
	#100	reset				=		1'b0			;

	#40		Asynch_in	=		1'b1			;
	#40		Asynch_in	=		1'b0			;
	#40		Asynch_in	=		1'b1			;
	#40		Asynch_in	=		1'b0			;
	
	#40		Asynch_in	=		1'b1			;
	#40		Asynch_in	=		1'b0			;
	#40		Asynch_in	=		1'b0			;
	#40		Asynch_in	=		1'b1			;	
	
	#40		reset				=		1'b1			;

	#40		Asynch_in	=		1'b1			;
	#40		Asynch_in	=		1'b0			;

	#40		$stop											;
	$display("Running testbench");                       
end     
                                               
always	begin
	#1			clock				=		~clock	;	
end    
                                                
endmodule

